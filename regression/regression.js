let dataMat = [[0.067732, 3.176513], [0.42781, 3.816464], [0.995731, 4.550095], [0.738336, 4.256571], [0.981083, 4.560815], [0.526171, 3.929515], [0.378887, 3.52617], [0.033859, 3.156393], [0.132791, 3.110301], [0.138306, 3.149813], [0.247809, 3.476346], [0.64827, 4.119688], [0.731209, 4.282233], [0.236833, 3.486582], [0.969788, 4.655492], [0.607492, 3.965162], [0.358622, 3.5149], [0.147846, 3.125947], [0.63782, 4.094115], [0.230372, 3.476039], [0.070237, 3.21061], [0.067154, 3.190612], [0.925577, 4.631504], [0.717733, 4.29589], [0.015371, 3.085028], [0.33507, 3.44808], [0.040486, 3.16744], [0.212575, 3.364266], [0.617218, 3.993482], [0.541196, 3.891471], [0.045353, 3.143259], [0.126762, 3.114204], [0.556486, 3.851484], [0.901144, 4.621899], [0.958476, 4.580768], [0.274561, 3.620992], [0.394396, 3.580501], [0.87248, 4.618706], [0.409932, 3.676867], [0.908969, 4.641845], [0.166819, 3.175939], [0.665016, 4.26498], [0.263727, 3.558448], [0.231214, 3.436632], [0.552928, 3.831052], [0.047744, 3.182853], [0.365746, 3.498906], [0.495002, 3.946833], [0.493466, 3.900583], [0.792101, 4.238522], [0.76966, 4.23308], [0.251821, 3.521557], [0.181951, 3.203344], [0.808177, 4.278105], [0.334116, 3.555705], [0.33863, 3.502661], [0.452584, 3.859776], [0.69477, 4.275956], [0.590902, 3.916191], [0.307928, 3.587961], [0.148364, 3.183004], [0.70218, 4.225236], [0.721544, 4.231083], [0.666886, 4.240544], [0.124931, 3.222372], [0.618286, 4.021445], [0.381086, 3.567479], [0.385643, 3.56258], [0.777175, 4.262059], [0.116089, 3.208813], [0.115487, 3.169825], [0.66351, 4.193949], [0.254884, 3.491678], [0.993888, 4.533306], [0.295434, 3.550108], [0.952523, 4.636427], [0.307047, 3.557078], [0.277261, 3.552874], [0.279101, 3.494159], [0.175724, 3.206828], [0.156383, 3.195266], [0.733165, 4.221292], [0.848142, 4.413372], [0.771184, 4.184347], [0.429492, 3.742878], [0.162176, 3.201878], [0.917064, 4.648964], [0.315044, 3.510117], [0.201473, 3.274434], [0.297038, 3.579622], [0.336647, 3.489244], [0.666109, 4.237386], [0.583888, 3.913749], [0.085031, 3.22899], [0.687006, 4.286286], [0.949655, 4.628614], [0.189912, 3.239536], [0.844027, 4.457997], [0.333288, 3.513384], [0.427035, 3.729674], [0.466369, 3.834274], [0.550659, 3.811155], [0.278213, 3.598316], [0.918769, 4.692514], [0.886555, 4.604859], [0.569488, 3.864912], [0.066379, 3.184236], [0.335751, 3.500796], [0.426863, 3.743365], [0.395746, 3.622905], [0.694221, 4.310796], [0.27276, 3.583357], [0.503495, 3.901852], [0.067119, 3.233521], [0.038326, 3.105266], [0.599122, 3.865544], [0.947054, 4.628625], [0.671279, 4.231213], [0.434811, 3.791149], [0.509381, 3.968271], [0.749442, 4.25391], [0.058014, 3.19471], [0.482978, 3.996503], [0.466776, 3.904358], [0.357767, 3.503976], [0.949123, 4.557545], [0.41732, 3.699876], [0.920461, 4.613614], [0.156433, 3.140401], [0.656662, 4.206717], [0.616418, 3.969524], [0.853428, 4.476096], [0.133295, 3.136528], [0.693007, 4.279071], [0.178449, 3.200603], [0.199526, 3.299012], [0.073224, 3.209873], [0.286515, 3.632942], [0.182026, 3.248361], [0.621523, 3.995783], [0.344584, 3.563262], [0.398556, 3.649712], [0.480369, 3.951845], [0.15335, 3.145031], [0.171846, 3.181577], [0.867082, 4.637087], [0.223855, 3.404964], [0.528301, 3.873188], [0.890192, 4.633648], [0.106352, 3.154768], [0.917886, 4.623637], [0.014855, 3.078132], [0.567682, 3.913596], [0.068854, 3.221817], [0.603535, 3.938071], [0.53205, 3.880822], [0.651362, 4.176436], [0.901225, 4.648161], [0.204337, 3.332312], [0.696081, 4.240614], [0.963924, 4.532224], [0.98139, 4.557105], [0.987911, 4.610072], [0.990947, 4.636569], [0.736021, 4.229813], [0.253574, 3.50086], [0.674722, 4.245514], [0.939368, 4.605182], [0.235419, 3.45434], [0.110521, 3.180775], [0.218023, 3.38082], [0.869778, 4.56502], [0.19683, 3.279973], [0.958178, 4.554241], [0.972673, 4.63352], [0.745797, 4.281037], [0.445674, 3.844426], [0.470557, 3.891601], [0.549236, 3.849728], [0.335691, 3.492215], [0.884739, 4.592374], [0.918916, 4.632025], [0.441815, 3.75675], [0.116598, 3.133555], [0.359274, 3.567919], [0.814811, 4.363382], [0.387125, 3.560165], [0.982243, 4.564305], [0.78088, 4.215055], [0.652565, 4.174999], [0.87003, 4.58664], [0.604755, 3.960008], [0.255212, 3.529963], [0.730546, 4.213412], [0.493829, 3.908685], [0.257017, 3.585821], [0.833735, 4.374394], [0.070095, 3.213817], [0.52707, 3.952681], [0.116163, 3.129283]]
let weights = [ 3.00774324 ,1.69532264]
const print = (obj) => {
	console.log(obj)
}
class TwoDData{
	constructor(dataMat){
		this.dataMat = dataMat
		this.n = dataMat.length
		this.m = dataMat[0].length
		this.initRange()
	}
	initRange(){
		let min_x = -1
		let max_x = -1
		let min_y = -1
		let max_y = -1
		let flag = true;
		for(let vec of dataMat){
			let x = vec[0];
			let y = vec[1];
			if(flag){
				min_x = x
				min_y = y
				max_x = x
				max_y = y
				flag = false
			}else{
				if(min_x > x){
					min_x = x
				}
				if(max_x < x){
					max_x = x
				}
				if(min_y > y){
					min_y = y
				}
				if(max_y < y){
					max_y = y
				}
			}
		}
		this.range = {x_range:(Math.abs(max_x)+Math.abs(min_x)),y_range:(Math.abs(max_y)+Math.abs(min_y))}
		this.min_x = min_x
		this.max_x = max_x
	}
	getDot(i){
		return {loc:dataMat[i]}
	}
}
const splitMatByLoc = (dataMat,i1,j1) => {
	let m = dataMat.length;
	let retMat = []
	for(let i=0;i<m;i++){
		if(i != i1){
			let tmpArr = []
			for(let j=0;j<m;j++){
				if(j != j1){
					tmpArr.push(dataMat[i][j])
				}
			}
			retMat.push(tmpArr)		
		}
	}
	return retMat
}
const f = (n)=>{
	if(n%2 == 0){
		return 1;
	}
	return -1;
}
const randLen = (len) => {
	return Math.floor(len*Math.random());
}
const calMat = (dataMat) => {
	let len = dataMat.length
	if(len == 1){
		return dataMat[0][0]
	}
	if(len == 2){
		return  dataMat[0][0]*dataMat[1][1] - dataMat[0][1]*dataMat[1][0];
	}
	let sum = 0
	let i = randLen(len)
	for(let j=0;j<len;j++){
		sum += f(i+j)*dataMat[i][j]*calMat(splitMatByLoc(dataMat,i,j),randLen(len-1));
	}
	return sum;
}

const reverseDataMat = (dataMat) => {
	let n = dataMat.length
	for(let i=0;i<n;i++){
		for(let j=0;j<i;j++){
			let tmp = dataMat[i][j]
			dataMat[i][j] = dataMat[j][i]
			dataMat[j][i] = tmp
		}
	}
}

const calMatInverse = (dataMat) =>{
	let retMat = []
	let n = dataMat.length
	let value = calMat(dataMat)
	if(value == 0){
		console.error("canot inverse")
		return
	}
	for(let i=0;i<n;i++){
		let tmpArr = []
		for(j=0;j<n;j++){
			let tmpMat = splitMatByLoc(dataMat,i,j);
			// print(tmpMat)
			let A = f(i+j)*calMat(tmpMat)
			tmpArr.push(A/value)
		}
		retMat.push(tmpArr)
	}
	reverseDataMat(retMat)
	return retMat
}

const shapeOfMat = (dataMat) => {
	let m = dataMat.length
	let n = dataMat[0].length
	return [m,n]
}


const multiplyMats = (mat1,mat2) => {
	let [m,n] = shapeOfMat(mat1)
	let [n1,m1] = shapeOfMat(mat2)
	if(n1 != n){
		console.error('cant multiply')
		return
	}
	let retMat = []
	for(let i=0;i<m;i++){
		let tmpArr = []
		for(let k=0;k<m1;k++){
			let sum = 0
			for(let j=0;j<n;j++){
				sum = sum + mat1[i][j]*mat2[j][k]
			}
			tmpArr.push(sum)
		}
		retMat.push(tmpArr)
	}
	return retMat
}

const initMat = (m,n,val) => {
	let retMat = []
	for(let i=0;i<m;i++){
		let tmpArr = []
		for(let j=0;j<n;j++){
			tmpArr.push(val)
		}
		retMat.push(tmpArr)
	}
	return  retMat
}



const TOfMat = (mat) => {
	let [m,n] = shapeOfMat(mat)
	let retMat = initMat(n,m,0)
	for(let j=0;j<m;j++){
		for(let i=0;i<n;i++){
			retMat[i][j] = mat[j][i]
		}
	}
	return retMat
}


xMat = [[1.0, 0.067732], [1.0, 0.42781], [1.0, 0.995731], [1.0, 0.738336], [1.0, 0.981083], [1.0, 0.526171], [1.0, 0.378887], [1.0, 0.033859], [1.0, 0.132791], [1.0, 0.138306], [1.0, 0.247809], [1.0, 0.64827], [1.0, 0.731209], [1.0, 0.236833], [1.0, 0.969788], [1.0, 0.607492], [1.0, 0.358622], [1.0, 0.147846], [1.0, 0.63782], [1.0, 0.230372], [1.0, 0.070237], [1.0, 0.067154], [1.0, 0.925577], [1.0, 0.717733], [1.0, 0.015371], [1.0, 0.33507], [1.0, 0.040486], [1.0, 0.212575], [1.0, 0.617218], [1.0, 0.541196], [1.0, 0.045353], [1.0, 0.126762], [1.0, 0.556486], [1.0, 0.901144], [1.0, 0.958476], [1.0, 0.274561], [1.0, 0.394396], [1.0, 0.87248], [1.0, 0.409932], [1.0, 0.908969], [1.0, 0.166819], [1.0, 0.665016], [1.0, 0.263727], [1.0, 0.231214], [1.0, 0.552928], [1.0, 0.047744], [1.0, 0.365746], [1.0, 0.495002], [1.0, 0.493466], [1.0, 0.792101], [1.0, 0.76966], [1.0, 0.251821], [1.0, 0.181951], [1.0, 0.808177], [1.0, 0.334116], [1.0, 0.33863], [1.0, 0.452584], [1.0, 0.69477], [1.0, 0.590902], [1.0, 0.307928], [1.0, 0.148364], [1.0, 0.70218], [1.0, 0.721544], [1.0, 0.666886], [1.0, 0.124931], [1.0, 0.618286], [1.0, 0.381086], [1.0, 0.385643], [1.0, 0.777175], [1.0, 0.116089], [1.0, 0.115487], [1.0, 0.66351], [1.0, 0.254884], [1.0, 0.993888], [1.0, 0.295434], [1.0, 0.952523], [1.0, 0.307047], [1.0, 0.277261], [1.0, 0.279101], [1.0, 0.175724], [1.0, 0.156383], [1.0, 0.733165], [1.0, 0.848142], [1.0, 0.771184], [1.0, 0.429492], [1.0, 0.162176], [1.0, 0.917064], [1.0, 0.315044], [1.0, 0.201473], [1.0, 0.297038], [1.0, 0.336647], [1.0, 0.666109], [1.0, 0.583888], [1.0, 0.085031], [1.0, 0.687006], [1.0, 0.949655], [1.0, 0.189912], [1.0, 0.844027], [1.0, 0.333288], [1.0, 0.427035], [1.0, 0.466369], [1.0, 0.550659], [1.0, 0.278213], [1.0, 0.918769], [1.0, 0.886555], [1.0, 0.569488], [1.0, 0.066379], [1.0, 0.335751], [1.0, 0.426863], [1.0, 0.395746], [1.0, 0.694221], [1.0, 0.27276], [1.0, 0.503495], [1.0, 0.067119], [1.0, 0.038326], [1.0, 0.599122], [1.0, 0.947054], [1.0, 0.671279], [1.0, 0.434811], [1.0, 0.509381], [1.0, 0.749442], [1.0, 0.058014], [1.0, 0.482978], [1.0, 0.466776], [1.0, 0.357767], [1.0, 0.949123], [1.0, 0.41732], [1.0, 0.920461], [1.0, 0.156433], [1.0, 0.656662], [1.0, 0.616418], [1.0, 0.853428], [1.0, 0.133295], [1.0, 0.693007], [1.0, 0.178449], [1.0, 0.199526], [1.0, 0.073224], [1.0, 0.286515], [1.0, 0.182026], [1.0, 0.621523], [1.0, 0.344584], [1.0, 0.398556], [1.0, 0.480369], [1.0, 0.15335], [1.0, 0.171846], [1.0, 0.867082], [1.0, 0.223855], [1.0, 0.528301], [1.0, 0.890192], [1.0, 0.106352], [1.0, 0.917886], [1.0, 0.014855], [1.0, 0.567682], [1.0, 0.068854], [1.0, 0.603535], [1.0, 0.53205], [1.0, 0.651362], [1.0, 0.901225], [1.0, 0.204337], [1.0, 0.696081], [1.0, 0.963924], [1.0, 0.98139], [1.0, 0.987911], [1.0, 0.990947], [1.0, 0.736021], [1.0, 0.253574], [1.0, 0.674722], [1.0, 0.939368], [1.0, 0.235419], [1.0, 0.110521], [1.0, 0.218023], [1.0, 0.869778], [1.0, 0.19683], [1.0, 0.958178], [1.0, 0.972673], [1.0, 0.745797], [1.0, 0.445674], [1.0, 0.470557], [1.0, 0.549236], [1.0, 0.335691], [1.0, 0.884739], [1.0, 0.918916], [1.0, 0.441815], [1.0, 0.116598], [1.0, 0.359274], [1.0, 0.814811], [1.0, 0.387125], [1.0, 0.982243], [1.0, 0.78088], [1.0, 0.652565], [1.0, 0.87003], [1.0, 0.604755], [1.0, 0.255212], [1.0, 0.730546], [1.0, 0.493829], [1.0, 0.257017], [1.0, 0.833735], [1.0, 0.070095], [1.0, 0.52707], [1.0, 0.116163]]
yArr = [3.176513, 3.816464, 4.550095, 4.256571, 4.560815, 3.929515, 3.52617, 3.156393, 3.110301, 3.149813, 3.476346, 4.119688, 4.282233, 3.486582, 4.655492, 3.965162, 3.5149, 3.125947, 4.094115, 3.476039, 3.21061, 3.190612, 4.631504, 4.29589, 3.085028, 3.44808, 3.16744, 3.364266, 3.993482, 3.891471, 3.143259, 3.114204, 3.851484, 4.621899, 4.580768, 3.620992, 3.580501, 4.618706, 3.676867, 4.641845, 3.175939, 4.26498, 3.558448, 3.436632, 3.831052, 3.182853, 3.498906, 3.946833, 3.900583, 4.238522, 4.23308, 3.521557, 3.203344, 4.278105, 3.555705, 3.502661, 3.859776, 4.275956, 3.916191, 3.587961, 3.183004, 4.225236, 4.231083, 4.240544, 3.222372, 4.021445, 3.567479, 3.56258, 4.262059, 3.208813, 3.169825, 4.193949, 3.491678, 4.533306, 3.550108, 4.636427, 3.557078, 3.552874, 3.494159, 3.206828, 3.195266, 4.221292, 4.413372, 4.184347, 3.742878, 3.201878, 4.648964, 3.510117, 3.274434, 3.579622, 3.489244, 4.237386, 3.913749, 3.22899, 4.286286, 4.628614, 3.239536, 4.457997, 3.513384, 3.729674, 3.834274, 3.811155, 3.598316, 4.692514, 4.604859, 3.864912, 3.184236, 3.500796, 3.743365, 3.622905, 4.310796, 3.583357, 3.901852, 3.233521, 3.105266, 3.865544, 4.628625, 4.231213, 3.791149, 3.968271, 4.25391, 3.19471, 3.996503, 3.904358, 3.503976, 4.557545, 3.699876, 4.613614, 3.140401, 4.206717, 3.969524, 4.476096, 3.136528, 4.279071, 3.200603, 3.299012, 3.209873, 3.632942, 3.248361, 3.995783, 3.563262, 3.649712, 3.951845, 3.145031, 3.181577, 4.637087, 3.404964, 3.873188, 4.633648, 3.154768, 4.623637, 3.078132, 3.913596, 3.221817, 3.938071, 3.880822, 4.176436, 4.648161, 3.332312, 4.240614, 4.532224, 4.557105, 4.610072, 4.636569, 4.229813, 3.50086, 4.245514, 4.605182, 3.45434, 3.180775, 3.38082, 4.56502, 3.279973, 4.554241, 4.63352, 4.281037, 3.844426, 3.891601, 3.849728, 3.492215, 4.592374, 4.632025, 3.75675, 3.133555, 3.567919, 4.363382, 3.560165, 4.564305, 4.215055, 4.174999, 4.58664, 3.960008, 3.529963, 4.213412, 3.908685, 3.585821, 4.374394, 3.213817, 3.952681, 3.129283]
yArr = yArr.map((key)=>{return [key]})
tXMat= TOfMat(xMat)
xTx = multiplyMats(tXMat,xMat)
IxTx = calMatInverse(xTx)
tmp = multiplyMats(tXMat,yArr)
ws = multiplyMats(IxTx,tmp)
